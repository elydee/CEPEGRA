Opérations:
CREATE => crée...
DROP => supprime l'élément ... et son contenu définitivement
ALTER => modifie la construction...
REPLACE => remplace...
SELECT => sélectionne et affiche...
INSERT INTO => insère dans...
UPDATE => met à jour... (données)
MODIFY => modifie... (type/options)
DELETE FROM => supprime les données dans...
START TRANSACTION => démarre la transaction... (innoDB)
COMMIT => enregistre les modifications de la transaction...
ROLLBACK => annule les modifications de la transaction...
SAVEPOINT => enregistre un point de sauvegarde sous... 
PREPARE => initialise ma requête sous...
EXECUTE => execute ma requête...
DEALLOCATE PREPARE => supprime la requête...

Sujets:
DATABASE => concerne la base de donnée...
TABLE => concerne le tableau...
TRANSACTION => concerne l'opération temporaire...
VIEW => concerne la vue...


Actions:
SET => applique...
AS => renomme le champ dans l'affichage, crée un alias
JOIN ... ON => lie les tableaux en fonction de la condition énoncée dans le ON, liaison est par défaut interne et n'affiche pas les résultats qui ne correspondent pas à la condition de la liaison entre deux éléments 
LEFT JOIN OUTER ... ON => lie les tableaux en donnant priorité à les éléments par la gauche et l'indique en externe, ça veut dire que si un élément n'est pas lié à un élément du tableau join, il s'affichera tout de même

Conditions, cible:
INTO => à l'intérieur de...
FROM => venant de...
WHERE => à l'endroit où...
OR => ou...
AND => et...
LIKE => équivaleut à... (string)
WITH => avec...

Organisations:
LIMIT => limite le nombre d'affichage à...
ORDER BY => organise les éléments dans l'ordre...
GROUP BY => regroupe par...
QUERY EXPANSION => permet d'étendre une plage de recherche au contenu de...

Fonctions:
IN() => contient...
COUNT() => compte le nombre de répétition du champ...
MAX() => l'élément maximum de...
AVG() => moyenne de...
ROUND() => arrondis...
CELL() => arrondis au supérieur...
FLOOR() => arrondis à l'inférieur...
TRUNCATE() => récupère ... jusqu'à ... chiffres après la virgule
MOD() => applique le modulo à...
CONCAT() => concatène...
LENGTH() => calcule la taille de...
LOWER() => convertis en bas de casse...
UPPER() => convertis en capitale...
SUBSTRING() => récupère les caractères ... de...
REPLACE() => dans ... remplace ... par...
SOUNDEX() => sort la sonorité de...
REVERSE() => inverse la chaine de...
TRIM() => supprime les espaces ou caractères choisis avant et arrière de...
MATCH() => recherche dans le texte...
AGAINST() => le mot-clef...
ADDDATE() => modifie ... en ajoutant à la date...
SUBDATE() => modifie ... en ajoutant à la date...
ADDTIME() => modifie ... en ajoutant à l'heure...
SUBTIME() => modifie ... en ajoutant à l'heure...
NOW() => récupère la date (timestamp, date + time) du jour
CURDATE() => recupère la date (simple) du jour
CURTIME() => récupère l'heure actuelle
DATEDIFF() => calcule la différence de jour entre la date de ... et de...
FROM_DAYS() => retourne le nombre de jour en date
DATE() => ne resort que la date d'un élément DATETIME
DATE_FORMAT() => permet de formater un format date à nos souhaits
GET_FORMAT() => récupère le format d'une date et la convertit dans le format de la zone géographique entrée
YEAR() => récupère l'année d'une date
MONTH() => récupère le mois d'une date
WEEK() => récupère la semaine d'une date
DAY() => récupère le jour d'une date


Opérateurs:
=
!=
<
>
<=
>=
% => regex, n'importe quel caractère
@ => déclaration variable

CREATE DATABASE => création d'une base de donnée
DEFAULT CHARACTER SET utf8 => définit l'encodage utilisé
DEFAULT COLLATE utf8_general_ci; => défini l'interclassement à utiliser
DROP DATABASE mydatabase = supprime la base de donnée nommée mydatabase
USE mydatabase; => cible la base de donnée mydatabase
CREATE TABLE person (
	name VARCHAR(255) NOT NULL,
	firstname VARCHAR(255) NOT NULL,
	birthdate DATE NOT NULL
) => crée une table nommée person avec les champs name et firstname de 255 caractères ainsi que le champ de type date birthdate, et aucun de ces champs ne peuvent rester vide
ENGINE=INNODB => Défini le moteur innodb
SHOW CREATE TABLE person => affiche la commande mysql pour créer une table sur le modèle de la table person existante
ALTER TABLE person ADD country VARCHAR(60) NOT NULL => permet de modifier la table person et de lui ajouter le champs country, avec 60 caractères et le champs est obligatoire
CHANGE mybirthdayz birthday DATE NOT NULL => change le champs mybirthdayz de type date pour le renommer en birthday cibler la table auparavant
MODIFY birthday DATETIME NULL => change le type du champs birthday en datetime optionnel
INSERT INTO person VALUES (NULL, 'Palau', 'Maxime', 1993/04/01), (NULL, 'Etienne', 'Nicolas', 1987/06/13);
=> insère les données dans la table person avec l'id en null, le nom, prénom et la date de naissance, et insère également une seconde ligne avec une seconde personne, chaque commande se fini par un point virgule
INSERT INTO person (name, firstname) VALUES ('Palau', 'Maxime');
=> Insère uniquement les champs correspondants à name et firstname
INSERT INTO person SET name='Palau', firstname='Maxime' => Idem ci dessous, syntaxe alternative propre à mysql
DELETE FROM person => supprime toutes les données dans le tableau person
DELETE FROM person WHERE firstname='Maxime' LIMIT 3 => supprime tous les Maxime dans le tableau person sur les 3 premières lignes, dans le cas où l'on veut supprimer une seule ligne, une sécurité vise à mettre un LIMIT 1
UPDATE person SET firstname='Maxence' WHERE id=1 LIMIT 1 => met à jour le nom de la personne en identifiant 1 avec une sécurité de 1 ligne à modifier, where est une condition qui me dit "à l'endroit ou l'identifiant correspond à 1"
TRUNCATE TABLE person = vide complètement la table person en réinitialisant également les clefs primaire
ORDER BY ASC => organise les éléments de manière ascendante soit alphabétique (DESC pour l'inverse)
ORDER BY name ASC => organise les éléments de manière ascendante en fonction des valeurs du champ name
LIMIT 4, 2 => affiche 2 éléments à partir du 4ème trouvé
COUNT() => fonction pour compter le nombre de répétition d'un élément qui contient une valeur
MAX() => fonction qui sélectionne l'élément du champs ciblé qui contient la plus grande valeur
LIKE "%gmail.com" => affiche tout ce qui se termine par gmail.com, l'opérateur % équivaut à "n'importe quoi" 
WHERE id IN (1, 3, 5, 7) => condition des éléments contenants les id 1, 3, 5 et 7
WHERE birthdate < SUBDATE('2016-06-04', INTERVAL 16 YEAR) => ou la date d'anniversaire est inférieur à la date du jour (date indiquée) - 16 ans, on obtient donc les personnes de 16 ans ou moins
FROM_DAYS(DATEDIFF(CURDATE(), birthdate)) => soustrait le nombre de jour de vécu de la personne en faisant la différence entre la date du jour et de naissance
JOIN person ON person.person_id = article.person_id => lie les deux tableaux person et article en fonction de la correspondance entre les deux champs person_id
START TRANSACTION => démarrage d'une transaction (stockage et modifications temporaire, actions pas encore engreistré dans la base de données, le commit n'a pas été effectué)